/*********************************************************/
/********** Author 		: Mahmoud Korayem ****************/
/********** Date        : 19 AUG 2020     ****************/
/********** version     : V 01			  ****************/
/********** Description : RCC-Program.c  ****************/
/*********************************************************/

#include "STD_TYPES.h"
#include "BIT_MATH.h"

void RCC_voidInitSysClock(void)
{
#if 	 RCC_CLOCK_TYPE    ==  RCC_HSE_CRYSTAL	
     RCC_CR    = 0x00010000; /*Enable HSE with no bypass */
	 RCC_CFGGR = 0x00000001;
#elif  	 RCC_CLOCK_TYPE  ==  RCC_HSE_RC	
     RCC_CR    = 0x00050000; 
	 RCC_CFGGR = 0x00000001;
#elif    RCC_CLOCK_TYPE  ==  RCC_HSI
    RCC_CR    = 0x00000081; /*Enable HSI +triming=0 16 internal default */
    RCC_CFGGR = 0x00000000;
#elif    RCC_CLOCK_TYPE  ==  RCC_PLL
	RCC_CR    = 0x
	RCC_CFGGR = 0x00000002;	
   #if   RCC_PLL_INPUT   ==  RCC_PLL_IN_HSI_DIV_2
   
   #elif RCC_PLL_INPUT   ==  RCC_PLL_IN_HSE_DIV_2	

   #elif RCC_PLL_INPUT   ==  RCC_PLL_IN_HSE
   
#else 
   RCC_CR    = 0x00000081; /*Enable PLL */
    RCC_CFGGR = 0x00000000;
#else 
	#error ("you choosed rong clock type")
#endif 
#elif    RCC_CLOCK_TYPE  ==  RCC_PLL	

}

void RCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
	if (Copy_u8PerId <=31)
	{
		switch(Copy_u8BusId)
		{	
			case RCC_AHP   :  SET_BIT(RCC_AHP ,Copy_u8PerId)	break;			
			case RCC_APB1  :  SET_BIT(RCC_APB1,Copy_u8PerId)	break; 			
			case RCC_APB2  :  SET_BIT(RCC_APB2,Copy_u8PerId)	break;	
			default        : /*Return Error */   		break;
			
		}	
    }
    
    else
    {
		/* Return Error */
    }		
	
}

void RCC_voidDisableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
	if (Copy_u8PerId <=31)
	{
		switch(Copy_u8BusId)
		{	
			case RCC_AHP   :  CLR_BIT(RCC_AHP ,Copy_u8PerId)	break;			
			case RCC_APB1  :  CLR_BIT(RCC_APB1,Copy_u8PerId)	break; 			
			case RCC_APB2  :  CLR_BIT(RCC_APB2,Copy_u8PerId)	break;	
			default        : /*Return Error */   		break;
			
		}	
    }
    
    else
    {
		/* Return Error */
    }		
	
}
